var tipuesearch = {
  "pages": [
    {
      "title": "Plasma Packages",
      "text": "PlasmaPy's charter includes promoting open-source software for all of \nthe plasma community, and not just plasmapy.  We feel the entire community \nbenefits when there are multiple efforts trying to build functionality for all \naspects of the plasma field.  As such, we want to promote any ongoing effort.  This\npage displays projects that have requested to be shown.  If you want your \nproject include, and increase its visibility, then please submit a request.\n\n    \n        Submit Request\n    \n\n\nAll projects/packages are considered Community Packages \n\n\n\n\n    \n\n, but packages designed with\nplasmapy interoperability are marked as Affiliated Packages \n\n\n\n\n    \n\n.\n\n\n\n\n\n\n    \n\n        \n        \n    \n    \n    \n    \n    \n    \n    \n    \n        \n            \n                    \n                    \n            \n        \n        \n            \n                \n                    \n                        plasmapy\n                    \n                    \n                \n                \n                    home\n                     | \n                    repo\n                \n            \n            \n                \n                    PlasmaPy is an open-source community developed Python 3 package for plasma physics.  PlasmaPy intends to be a collection of functionality commonly used and shared between plasma physicists and researchers globally.\n                \n            \n            \n                \n                    License: BSD 3-clause with patent grant\n                \n            \n            \n                \n                    Keywords: physics, plasma, Python 3\n                \n            \n        \n    \n\n        \n        \n    \n    \n    \n    \n    \n    \n    \n    \n        \n            \n                    \n                        \n                            tofu\n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        tofu\n                    \n                    \n                        \n                            \n    \n\n                        \n                \n                \n                    home\n                     | \n                    repo\n                \n            \n            \n                \n                    tofu is an open-source python library.  It aims at providing the user with a ready-set toolbox for modelling synthetic diagnostics and performing tomographic inversions on linear or toroidal (quasi-axisymmetric) fusion devices.  It is relevant for diagnostics integrating an emissivity on a set of Lines of Sight or Volumes of Sight corresponding to as many detectors or pixels, and for which the plasma can be considered transparent (i.e. not for radio-frequencies / microwaves).\n                \n            \n            \n                \n                    License: MIT\n                \n            \n            \n                \n                    Keywords: diagnostics, fusion, physics, plasma, Python 3",
      "tags": "",
      "url": "https://www.plasmapy.org/affiliates/"
    },
    {
      "title": "Code of conduct",
      "text": "Contributor Covenant Code of Conduct\nOur Pledge\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\nOur Standards\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\nUsing welcoming and inclusive language\nBeing respectful of differing viewpoints and experiences\nGracefully accepting constructive criticism\nFocusing on what is best for the community\nShowing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\nThe use of sexualized language or imagery and unwelcome sexual attention or\nadvances\nTrolling, insulting/derogatory comments, and personal or political attacks\nPublic or private harassment\nPublishing others' private information, such as a physical or electronic\n  address, without explicit permission\nOther conduct which could reasonably be considered inappropriate in a\n  professional setting\n\nOur Responsibilities\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\nScope\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\nEnforcement\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting Nick Murphy at namurphy@cfa.harvard.edu. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\nAttribution\nThis Code of Conduct is adapted from the Contributor Covenant, version 1.4,\navailable at http://contributor-covenant.org/version/1/4",
      "tags": "",
      "url": "https://www.plasmapy.org/conduct/"
    },
    {
      "title": "Contribute to PlasmaPy",
      "text": "Contributing to PlasmaPy\nThere are numerous ways to contribute to PlasmaPy, including by\nproviding code and documentation, suggesting and discussing ideas,\nsubmitting issues and bug reports, and engaging the broader plasma\nphysics community.  \nImposter syndrome disclaimer: We want your help. No, really.\nThere may be a little voice inside your head that is telling you that you're not\nready to be an open source contributor; that your skills aren't nearly good\nenough to contribute. What could you possibly offer a project like this one?\nWe assure you - the little voice in your head is wrong. If you can write code at\nall, you can contribute code to open source. Contributing to open source\nprojects is a fantastic way to advance one's coding skills. Writing perfect code\nisn't the measure of a good developer (that would disqualify all of us!); it's\ntrying to create something, making mistakes, and learning from those\nmistakes. That's how we all improve, and we are happy to help others learn.\nBeing an open source contributor doesn't just mean writing code, either. You can\nhelp out by writing documentation, tests, or even giving feedback about the\nproject (and yes - that includes giving feedback about the contribution\nprocess). Some of these contributions may be the most valuable to the project as\na whole, because you're coming to the project with fresh eyes, so you can see\nthe errors and assumptions that seasoned contributors have glossed over.\nThis disclaimer was originally written by\nAdrienne Lowe for a\nPyCon talk, and was adapted by \nyt in their README file based on its use \nin the README file for the MetPy project.\nIt was then adapted by PlasmaPy.\nSharing ideas\nThere are several methods of communication that are being used in the\nearly stages of PlasmaPy development:\n\n\nSigning up for the PlasmaPy email\n  list will allow\n  you to participate in broader discussions and keep up with the\n  latest developments.\n\n\nThe PlasmaPy repository on\n  GitHub is the best place to\n  submit issues and\n  review pull requests.\n\n\nThe PlasmaPy Matrix or \n  Gitter joint channel\n  is a great place to have informal conversations, coordinate efforts,\n  and share ideas.  \n\nWe have biweekly telecons which are announced on the email list.\n\nContributing code or documentation to PlasmaPy\nIf you see something you'd like to work on amongst our\nissues, or if you've got\na great idea for something to include in the package, start hacking away on\nthat! However, please announce your intent first in the relevant issue (or make\none if necessary) to make sure there is no work duplication.\nYou can find most of what you should know in the Contributing Guide.\nPlease note that PlasmaPy has a Code of Conduct.\nIssues marked by the community as help wanted mean just that - either they're\ngood contributions for outsiders or there's an issue in the ongoing work that\nrequires a second opinion. Please consider these first!",
      "tags": "",
      "url": "https://www.plasmapy.org/contribute/"
    },
    {
      "title": "The PlasmaPy Project",
      "text": "Please help us improve PlasmaPy and inform our development by\n                taking the 2021 PlasmaPy Survey.\n            \n        \n        \n    \n\n\n\n\n    \n    \n        \n        \n            \n                PlasmaPy\n                \"Office\" Hours\n                Thursdays at 19 UTC\n            \n        \n        \n    \n    \n    \n        \n        \n            \n                Weekly Community Meeting\n                Tuesday 19 UTC\n            \n        \n        \n    \n    \n    \n        \n        \n            \n                Join\n                the\n                Chat\n            \n        \n        \n    \n\n\n\n\n\n    \n    \n\n\n\nThe goal of the PlasmaPy Project is to foster the creation of an open source Python ecosystem for plasma research and education.  The PlasmaPy package contains core functionality for this software ecosystem, while affiliated packages will contain more specialized functionality.\nInstall PlasmaPy\nPlasmaPy may be installed from the command line using pip:\npip install plasmapy\n\nNote: If you run into difficulty using pip, you may also try using pip3 or python -m pip or python3 -m pip as the command.\nIf you have a working installation of conda, then you may install PlasmaPy with\nconda install -c conda-forge plasmapy\n\nPlasmaPy's online documentation contains more \ndetailed installation instructions.\nIf you are unfamiliar with Python, please check out the \nPython website for more information.\nLearn PlasmaPy\nPlasmaPy's documentation describes how to use PlasmaPy and provides several examples. \nGet Help\nThe quickest way to reach PlasmaPy users and developers is through PlasmaPy's\nElement chat room.\nPlasmaPy's GitHub Discussions\npage is an ideal place for\nlonger discussions on more detailed topics.\nContribute and Report Bugs\nMaking feature requests, reporting bugs, and offering suggestions are some of the most helpful ways to contribute to the ongoing development of PlasmaPy.  The documentation discusses how to contribute code and documentation to PlasmaPy and contains a development guide.\nAcknowledgments\nOngoing development of PlasmaPy is supported by the U.S. National Science Foundation, with many contributions from the broader plasma physics and open source communities.  Past development of PlasmaPy has been supported by the U.S. Department of Energy, the Smithsonian Institution, NASA, and Google Summer of Code.",
      "tags": "",
      "url": "https://www.plasmapy.org/"
    },
    {
      "title": "License",
      "text": "Licenses\nSource code files and code snippets included in this project are\nlicensed under a BSD 3-clause license with a patent\ngrant.  All other content in\nthis project, including content produced directly from unmodified\nsource code and code snippets, is licensed under a Creative Commons\nAttribution 4.0 International (CC BY 4.0)\nlicense.\nCopyright (c) 2017-2020, PlasmaPy Developers.\nBSD 3-clause license with patent grant\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n\nRedistributions of source code must retain the above copyright\n  notice, this list of conditions and the following disclaimer.\n\n\nRedistributions in binary form must reproduce the above copyright\n  notice, this list of conditions and the following disclaimer in the\n  documentation and/or other materials provided with the distribution.\n\n\nNeither the name of PlasmaPy nor the names of its contributors may\n  be used to endorse or promote products derived from this software\n  without specific prior written permission.\n\n\nSubject to the terms and conditions of this license, each copyright\nholder and contributor hereby grants to those receiving rights under\nthis license a perpetual, worldwide, non-exclusive, no-charge,\nroyalty-free, irrevocable (except for failure to satisfy the\nconditions of this license) patent license to make, have made, use,\noffer to sell, sell, import, and otherwise transfer this software,\nwhere such license applies only to those patent claims, already\nacquired or hereafter acquired, licensable by such copyright holder or\ncontributor that are necessarily infringed by:\n(a) their Contribution(s) (the licensed copyrights of copyright\nholders and non-copyrightable additions of contributors, in source or\nbinary form) alone; or\n(b) combination of their Contribution(s) with the work of authorship\nto which such Contribution(s) was added by such copyright holder or\ncontributor, if, at the time the Contribution is added, such addition\ncauses such combination to be necessarily infringed. The patent\nlicense shall not apply to any other combinations which include the\nContribution.\nExcept as expressly stated above, no rights or licenses from any\ncopyright holder or contributor is granted under this license, whether\nexpressly, by implication, estoppel or otherwise.\nDisclaimer\nThis software is provided by the copyright holders and contributors\n\"as is\" and any express or implied warranties, including, but not\nlimited to, the implied warranties of merchantability and fitness for\na particular purpose are disclaimed. In no event shall the copyright\nholder or contributors be liable for any direct, indirect, incidental,\nspecial, exemplary, or consequential damages (including, but not\nlimited to, procurement of substitute goods or services; loss of use,\ndata, or profits; or business interruption) however caused and on any\ntheory of liability, whether in contract, strict liability, or tort\n(including negligence or otherwise) arising in any way out of the use\nof this software, even if advised of the possibility of such damage.",
      "tags": "",
      "url": "https://www.plasmapy.org/license/"
    },
    {
      "title": "1st PlasmaPy Mini-Conference",
      "text": "1st PlasmaPy Workshop\nApril 20-22, 2020\nBryn Mawr College, Pennsylvania\n\n\n    \n        !! -- Workshop Cancelled\n    \n    \n        Due to the rapid development of COVID-19 (coronavirus) and out of an abundance\n        of caution, the PlasmaPy workshop organizers have decided to cancel PlasmaPy's \n        first workshop.\n    \n    \n        We originally intended to web-cast portions of the workshop, but with no \n        in-person attendees we feel this format would lead to a poor transmission of \n        ideas between PlasmaPy and its community.  At this time, it is crucial that \n        PlasmaPy fosters a strong community interaction to not only to convey its \n        goals and ambitions, but to receive vital feed back from our community.  \n        Thus, we have decided to replace this workshop with a series of webinars\n        and discussions to be held over the coming months.  As more information \n        on the series becomes available we will update the community.\n    \n    \n        Thank you for your continued support,\n        The PlasmaPy Workshop Organizers\n    \n\n\nOverview\nAgenda\nRegistration\nTravel & Housing\nTravel Funding for Students\nWeb Participation\nSupport & Acknowledgements\n Overview\nPlasmaPy's first workshop, which is set up as a 3 day meeting for PlasmaPy developers and \nthe PlasmaPy community. The first day (4/20) is designated for the PlasmaPy Team to \ndiscuss code development and project direction.  The remaining two days (4/21-4/22) are \ndesigned for community interaction.  Goals of the meeting are to (1) further develop \nPlasmaPy's roadmap, (2) inform the broader PlasmaPy community of PlasmaPy's objectives \nand direction, (3) demonstrate PlasmaPy's capabilities to the community, and (4) receive \nvaluable feedback from the community.\n Agenda\n\nNOTE\nAs the meeting approaches, please check the agenda for updates.  As presentation material\nbecomes available we will post links for slides and additional information.\n\nDay 1 - April 20, 2020\nDay 1 is intended for the PlasmaPy committee and internal topics.  Attendees will be\nrestricted to the PlasmaPy committee and developers.  We'll address topics related to \npackage development, community outreach, and education.\n\n\n\nTime\nSection\nTitle\nSpeaker/Leader\n\n\n\n\n08:30 - 09:00\n0\nARRIVAL & COFFEE\n\n\n\n09:00 - 09:15\n1\nWelcome: Introduction & Overview\n\n\n\n09:15 - 09:35\n2\nRoadmap: Overview & Current Projections\n\n\n\n09:35 - 10:20\n3\nRoadmap: Formulary Development\n\n\n\n10:20 - 10:35\n\nCOFFEE BREAK\n\n\n\n10:35 - 11:20\n4\nRoadmap: Simulations Development\n\n\n\n11:20 - 12:05\n5\nRoadmap: Experimental Diagnostics Development\n\n\n\n12:05 - 13:30\n\nLUNCH BREAK\n\n\n\n13:30 - 14:15\n6\nRoadmap: Development of Remaining Elements\n\n\n\n14:15 - 15:00\n7\nCommunity Interaction & Contribution\n\n\n\n15:00 - 15:15\n\nCOFFEE BREAK\n\n\n\n15:15 - 16:00\n8\nEducation & Outreach\n\n\n\n16:00 - 16:45\n9\nStudent Projects\n\n\n\n16:45 - 17:30\n10\nOpen Discussion for Uncovered Topics\n\n\n\n17:30 - 18:00\n11\nSummarize Tasks & Responsibilities\n\n\n\n\n\nADJOURN\n\n\n\n\n\nDay 2 - April 21, 2020\nDay 2 is the first day for the broader PlasmaPy Community.  The day will be divided into\nthree parts, (1) introducing/sharing PlasmaPy's plans to the community, (2) demonstrating\nexamples of how the code works, and (3) conversing with the community to get feedback\nand suggestions.  This day will also be available via web-cast.\n\n\n\nTime\nSection\nTitle\nSpeaker/Leader\n\n\n\n\n08:30 - 09:00\n0\nARRIVAL & COFFEE\n\n\n\n09:00 - 09:10\n1\nWelcome to Users\n\n\n\n09:10 - 10:00\n2\nPlasmaPy Overview\n\n\n\n10:00 - 10:20\n3\nPlasmaPy - Simulations\n\n\n\n10:20 - 10:35\n\nCOFFEE BREAK\n\n\n\n10:35 - 10:55\n4\nPlasmaPy - Experimental Diagnostics\n\n\n\n10:55 - 11:45\n5\nCommunity Interaction\n\n\n\n11:45 - 13:15\n\nLUNCH BREAK\n\n\n\n13:15 - 13:35\n6\nEducation & Outreach\n\n\n\n13:35 - 13:55\n7\nContributing to PlasmaPy\n\n\n\n13:55 - 14:30\n8\nDemo - Working through a Pull Request\n\n\n\n14:30 - 14:50\n9\nDemo - #2\n\n\n\n14:50 - 15:05\n\nCOFFEE BREAK\n\n\n\n15:05 - 15:25\n10\nDemo - #3\n\n\n\n15:25 - 17:00\n11\nCommunity Discussion\n\n\n\n\n\nADJOURN\n\n\n\n\n\nDay 3 - April 22, 2020\nDay 3 is a workshop day to provide hands-on experience with PlasmaPy and one-on-one \ncommunity interaction.  In the morning session we will provide a few mini \nexample projects to highlight PlasmaPy's features.  The afternoon session will\nbe an open session where users can interact directly with the PlasmaPy team, asking\nan relevant questions, getting help on existing projects, etc.\n\n\n\nTime\nSection\nTitle\nSpeaker/Leader\n\n\n\n\n08:30 - 09:00\n0\nARRIVAL & COFFEE\n\n\n\n09:00 - 12:00\n1\nWorkshop: Examples Projects\n\n\n\n12:00 - 13:30\n\nLUNCH BREAK\n\n\n\n13:30 - 16:00\n4\nOpen Session\n\n\n\n\n\nADJOURN\n\n\n\n\n\n Travel & Housing\n\nNOTE\nDue to the ongoing development of the novel coronavirus (COVID-19), travel restrictions\nmay be in place when this workshop occurs.  If this is the case, we will still proceed \nwith the workshop via a web-cast.  Additionally, we strongly\nrecommend that any booked travel plans are refundable.\n\nIn the near future we will post a few recommendations for travel to and housing \nlocations around Bryn Mawr.\n\n Travel Funding for Students\nAs part of our support from the NSF-CSSI program, we will offer some amount of travel\nfunding for interested students to attend.  The exact amount will depend on the \nnumber of participating students.  Please check back soon as we will update with\ninstructions on how to apply for travel funding.\n\n Web Participation\nWe currently plan to have days 2 & 3 available on web-cast so non-attendees and still \nparticipate.  As the meeting approaches, we will post info on how to attend via the\nweb-cast.\n\n Support & Acknowledgments\nOngoing development of PlasmaPy is supported by the U.S. National Science Foundation \n(NSF) and NASA, with many contributions from the broader plasma physics and open source \ncommunities. Early development of PlasmaPy was supported by the U.S. Department of \nEnergy, the Smithsonian Institution, and Google Summer of Code.\nSupport for this workshop is provided through a grant from the NSF Cyberinfrastructure for \nSustained Scientific Innovation (CSSI)  program.",
      "tags": "",
      "url": "https://www.plasmapy.org/meetings/1st_workshop_2020_at_bryn_mawr/"
    },
    {
      "title": "62nd APS DPP - 11.04 Mini-Conference Followups",
      "text": "62nd APS DPP - 11.04 Mini-Conference | Post-Meeting Discussions\nGrowing an open-source software ecosystem for plasma science\n\n\nWhere: On Zoom \nDay 1: Tuesday, November 17th at 21 UTC / 4 pm EST / 1 pm PST \nDay 2: Thursday, November 19th at 19 UTC / 2 pm EST / 11 am PST \n\n\nIn order to capitalize on the opportunities afforded by bringing together the\ndiversity of speakers and attendees and perspectives during this year's \nmini-conference, we plan to host two post-meeting discussions.  Here\nwe can continue the discussion on fostering the open-source community, bringing\nin more members to our projects, organizing inter-project efforts, improving\npackage interoperability, etc.",
      "tags": "",
      "url": "https://www.plasmapy.org/meetings/aps/62nd_dpp_mini_conf_followups/"
    },
    {
      "title": "PlasmaPy Meetings",
      "text": "Weekly Meetings\n\nWeekly Community Meeting: Every Tuesday at 19 UTC / 11 am PST / 2 pm EST\n\n\nPlasmaPy \"Office\" Hours: Every Thursday at 19 UTC / 11 am PST/ 2 pm EST\n\n\n\nPast Meetings\n\n2020 April:  1st PlasmaPy Workshop [CANCELLED]\nApril 20-22, 2020\nPlasmaPy's first workshop, which is set up as a 3 day meeting for PlasmaPy developers and \nthe PlasmaPy community. The first day (4/20) is designated for the PlasmaPy Team to discuss\ncode development and project direction.  The remaining two days (4/21-4/22) are designed \nfor community interaction, informing the community of PlasmaPy's goals and features, as \nwell as, getting vital feedback from the community.\n\n\n62nd APS DPP - 11.04 Mini-Conference: Growing an open source software ecosystem for plasma science\nNovember 11 & 12, 2020\n\n\n62nd APS DPP - 11.04 Mini-Conference | Post-Meeting Discussions\nDay 1: November 17, 2020 at 21 UTC / 4 pm EST / 1 pm PST\nDay 2: November 19, 2020 at 19 UTC / 2 pm EST / 11 am PST",
      "tags": "",
      "url": "https://www.plasmapy.org/meetings/"
    },
    {
      "title": "PlasmaPy \"Office\" Hours",
      "text": "PlasmaPy \"Office\" Hours\nDo you have a question about PlasmaPy?  Would you like to learn how to\nbecome active in the PlasmaPy project?  Do you have an idea for a great\nnew feature or want to start an affiliated package?\nIf so, then please join us for informal PlasmaPy \"office\" hours on\nThursdays at 19 UTC (2 pm EST / 11 am PST).  We will meet using this \nZoom link.  Any last minute changes will be announced in PlasmaPy's \nchat room.\nThe chat room can be used to reach PlasmaPy developers at other times,\nin particular if the time for \"office\" hours does not work for you.",
      "tags": "",
      "url": "https://www.plasmapy.org/meetings/office_hours/"
    },
    {
      "title": "Weekly PlasmaPy Community Meeting",
      "text": "Weekly PlasmaPy Community Meeting\nTuesdays at 19 UTC / 2 pm EST / 11 am PST\nWhere: on Jitsi \nTime: Every Tuesday at 19 UTC / 2 pm ET / 11 am PST \nMinutes & Agenda: on Google Drive \nCalendar: on Google Calendar \n\nOverview\nOn Tuesdays PlasmaPy hosts its weekly online community meeting to cover the various \nongoing development topics, with some occasional bonus puns from Nick Murphy.\nThis call is hosted on Jitsi with the minutes and agenda available on Google Drive.\nThe schedule is also published on our calendar.  Each meeting \nis announced on our Matrix chat about an hour before the start, with any last \nminute changes also being announced there.",
      "tags": "",
      "url": "https://www.plasmapy.org/meetings/weekly/"
    },
    {
      "title": "Vision statement",
      "text": "A vision for an open source core Python package for plasma physics\nAbout PlasmaPy\nPlasmaPy is a community-developed and community-driven free and open\nsource Python package that provides common functionality required for\nplasma physics in a single, reliable codebase.\nMotivation\nIn recent years, researchers in many different scientific disciplines\nhave worked together to develop core Python packages such as Astropy,\nSunPy, and SpacePy. These packages provide core functionality, common\nframeworks for data visualization and analysis, and educational tools\nfor their respective scientific disciplines. We believe that a similar\ncooperatively developed package for plasma physics will greatly\nbenefit our field. In this document, we lay out our vision for\nPlasmaPy: a community-developed and community-driven open source core\nPython software package for plasma physics.\nThere is considerable need in plasma physics for open, general purpose\nsoftware framework using modern best practices for scientific\ncomputing. As most\nscientific programmers are largely self-taught, software often does not\ntake advantage of these practices and is instead written in a rush to\nproduce results for the next research paper. The resulting code is\noften difficult to read and maintain, the documentation is usually\ninadequate, and tests are typically implemented late in the\ndevelopment process if at all.  Legacy code is often written in low\nlevel languages such as Fortran, which typically makes compiling and\ninstalling packages difficult and frustrating, especially if it\ncalls external libraries. It is also unusual to share code, and access\nto major software is often restricted in some way, resulting in many\ndifferent programs and packages which do essentially the same thing but\nwith little or no interoperability. These factors lead to research\nthat is difficult to reproduce, and present a significant barrier to\nentry for new users.\nThe plasma physics community is slowly moving in the open source\ndirection.  Several different types of packages and software have \nbeen released under open source licences, including the UCLA \nPIC codes, PICCANTE, EPOCH, VPIC, PIConGPU, WARP, the FLASH framework, \nAthena, and PENCIL.  These projects are built as individual packages, \nare written in different programming languages, and often have many \ndependencies  on specific packages.  Python packages such as Astropy, \nSunPy, and SpacePy have had notable success providing\nopen source alternatives to legacy code in related fields.  We are\ngrateful to these communities for their hard work, and hope to build\nupon their accomplishments for the field of plasma physics.\nAn end user might not always be interested in a complicated powerpack\nto perform one specific task on supercomputers. She might also be\ninterested in performing some basic plasma physics calculations,\nrunning small desktop scale simulations to test preliminary ideas\n(e.g., 1D MHD/PIC or test particles), or even comparing data from two\ndifferent sources (simulations vs. spacecraft). Such tasks require a\ncentral platform. This is where PlasmaPy comes in.\nEnsuring a welcoming and inclusive environment\nPlasmaPy strives to follow the best practices in open source software\ndevelopment. New contributors are encouraged to join the team and\ncontribute to the codebase. We anticipate/encourage a global\nparticipation from people with diverse backgrounds, skills, interests,\nand opinions. We believe that such diversity is critical in ensuring a\ngrowth of ideas in our community. We as a community pledge to abide by\nthe following guidelines:\n\nWe pledge to treat all people with respect and provide a harassment-\n  and bullying-free environment, regardless of sex, sexual orientation\n  and/or gender identity, disability, physical appearance, body size,\n  race, nationality, ethnicity, and religion. In particular, sexual\n  language and imagery, sexist, racist, or otherwise exclusionary\n  jokes are not appropriate.\nWe pledge to respect the work of others by recognizing\n  acknowledgment/citation requests of original authors. As authors, we\n  pledge to be explicit about how we want our own work to be cited or\n  acknowledged.\nWe pledge to welcome those interested in joining the community, and\n  realize that including people with a variety of opinions and\n  backgrounds will only serve to enrich our community. In particular,\n  discussions relating to pros/cons of various technologies,\n  programming languages, and so on are welcome, but these should be\n  done with respect, taking proactive measure to ensure that all\n  participants are heard and feel confident that they can freely\n  express their opinions.\nWe pledge to welcome questions and answer them respectfully, paying\n  particular attention to those new to the community. We pledge to\n  provide respectful criticisms and feedback in forums, especially in\n  discussion threads resulting from code contributions.\nWe pledge to be conscientious of the perceptions of the wider\n  community and to respond to criticism respectfully. We will strive\n  to model behaviors that encourage productive debate and\n  disagreement, both within our community and where we are\n  criticized. We will treat those outside our community with the same\n  respect as people within our community.\nWe pledge to work from the very beginning of this project to make\n  PlasmaPy accessible to people with disabilities.\nWe pledge to help the entire community follow these guidelines, and\n  to not remain silent when we see violations of them. We will take\n  action when members of our community violate these\n  guidelines. Members of the PlasmaPy community may contact any member\n  of the Coordinating Committee to report violations. Members of the\n  Coordinating Committee will treat these reports in the strictest\n  confidence.  The Coordinating Committee will develop formal\n  procedures for how to handle reported violations.\n\nParts of these guidelines have been adapted from the Astropy code of\nconduct and the\nPython Software Foundation code of\nconduct.\nOrganizational structure\nThe Coordinating Committee (CC) will oversee the PlasmaPy project and\ncode development.  The CC will ensure that roles are being filled,\nfacilitate community-wide communication, coordinate and delegate\ntasks, manage the project repository, oversee the code review process,\nregulate intercompatibility between different subpackages, seek\nfunding mechanisms, facilitate compromises and cooperation, enforce\nthe code of conduct, and foster a culture of appreciation.\nThe Community Engagement Committee (CEC) will be responsible for\norganizing conferences, trainings, and workshops; maintaining and\nmoderating social media groups and accounts; overseeing PlasmaPy\u2019s\nwebsite; and communicating with the PlasmaPy and plasma physics\ncommunities. The CEC will facilitate partnerships with groups such as\nSoftware Carpentry.\nEach subpackage will have lead and deputy coordinators who will guide\nand oversee the development of that subpackage.\nThe Accessibility Coordinator will work to ensure that the PlasmaPy\ncodebase, documentation, and practices are accessible to disabled\nstudents and scientists.  Additional roles include the Webpage\nMaintainer, the Release Coordinator, and the Testing Coordinator.\nThe work undertaken by each of these groups and coordinators should be\ndone openly and transparently, except where confidentiality is needed.\nWe will strive to have multiple subfields from plasma physics in each\ncommittee.  Major decisions should ideally be made by general\nconsensus among the PlasmaPy community, but when consensus is not\npossible then the committees may decide via majority vote.  Much of\nthis section is following the organizational structure of\nAstropy.\nDevelopment procedure\nThe initial developers of PlasmaPy will create a flexible \ndevelopment roadmap that outlines and prioritizes subpackages to be\ndeveloped.  The developers will survey existing open source Python\npackages in plasma physics.  Priority will be given to determining how\ndata will be stored and structured.  Developers will break up into\nsmall groups to work on different subpackages.  These small groups\nwill communicate regularly and work towards interoperability and\ncommon coding practices.\nBecause Python is new to many plasma physicists, community engagement\nis vital.  The CEC will arrange occasional informal trainings early in\nthe project that are director towards the initial developers.\nNew code and edits should be submitted as a pull request to the\ndevelopment branch of the PlasmaPy repository on GitHub.  The pull\nrequest will undergo a code review by the subpackage maintainers\nand/or the CC, who will provide suggestions on how the contributor may\nupdate the pull request.  Subpackage maintainers will generally be\nresponsible for deciding on pull requests with minor changes, while\npull requests with major changes should be decided jointly by the\nsubpackage maintainers and the CC.  The CC and CEC will develop a\nfriendly guide on how users may contribute new code to PlasmaPy.\nNew code should conform to the PEP 8 style guide for Python\ncode and the established\ncoding style within PlasmaPy.  New code should be submitted with\ndocumentation and tests.  Documentation should be written primarily in\ndocstrings and follow the numpydoc documentation style\nguide.\nEvery new module, class and function should have an appropriate\ndocstring.  The documentation should describe the interface and the\npurpose for the method, but generally not the implementation.  The\ncode itself should be readable enough to be able to explain how it\nworks.  Documentation should be updated when the code is edited.  The\ntests should cover new functionality (especially methods with complex\nlogic), but the tests should also be readable and easy to maintain.\nExisting tests should be updated when necessary [e.g., during the\ninitial development of a new feature when the application program\ninterface (API) is not yet stable], but with caution since this may\nimply loss of backwards compatibility.\nMembers of the PlasmaPy community may submit PlasmaPy Enhancement\nProposals (PLEPs) to suggest changes such as major reorganization of a\nsubpackage, creation of a new subpackage, non-backwards compatible\nchanges to a stable package, or significant changes to policies and\nprocedures related to the organization of this project.  The issues\nlist on GitHub will generally be more appropriate for changes that do\nnot require community discussion.  The CC shall maintain a GitHub\nrepository of PLEPs.  PLEPs will be made openly available for\ncommunity discussion and transparency for a period of at least four\nweeks, during which time the proposal may be updated and revised by\nthe proposers.  The CC shall approve or decline these proposals after\nseeking community input.  The rationale behind the decision and a\nsummary of the community discussion shall be recorded along with the\nPLEP.\nProgramming guidelines\nChoice of languages\nPlasmaPy shall be written using Python 3.  PlasmaPy shall initially\nguarantee compatibility with Python 3.6 and above.  Python 3 is\ncontinually growing, so we will proceed on the general principle that\nfuture updates to PlasmaPy remain compatible with releases of Python\nthat are up to two years old.  Python 2.7 and below will not be\nsupported as these versions will no longer be updated past 2020.  The\ncore package will initially be written solely in Python.\nCode readability is more important than optimization, except when\nperformance is critical.  Code should be optimized only after getting\nit to work, and primarily for where there is a performance bottleneck.\nPerformance-critical parts of the core package will preferably be\nwritten using Cython or Numba to achieve compiled speeds while\nmaintaining the significant advantages of using a high level language.\nVersioning\nPlasmaPy will use Semantic Versioning.  Releases\nwill be given version numbers of the form MAJOR.MINOR.PATCH,\nwhere MAJOR, MINOR, and PATCH are nonnegative integers. Starting\nwith version 1.0, MAJOR will be incremented when backwards\nincompatible changes are made, MINOR will be incremented when new\nbackwards-compatible functionality is added, and PATCH will be\nincremented when backwards-compatible bug fixes are made.  \nDevelopment releases will have MAJOR equal to zero and start at\nversion 0.1.  The API should not be considered stable during the\ndevelopment phase.  PlasmaPy will release version 1.0 once it has a\nstable public API that users are depending on for production code.\nAll releases will be provided with release notes and change log\nentries, and a table will be provided that describes the stability of\nthe public API for each PlasmaPy subpackage.\nDependencies\nDependencies have the advantage of providing capabilities that will\nenhance PlasmaPy and speed up its development, but the disadvantage\nthat they can make manual installation more difficult and potentially\nfrustrating.  Package managers such as Anaconda and Homebrew greatly\nsimplify installation of Python packages, but there will be situations\nwhere manual installation is necessary (e.g., on some supercomputers\nwithout package managers).  The core package should be able to be\nimported using a minimal number of packages (e.g., NumPy, SciPy, and\nmatplotlib) without getting an import error.  Additional packages may\nbe included as dependencies of the core package if there is a strong\nneed for it, and if these packages are easily installed with currently\navailable package managers.  Subpackages may use additional\ndependencies when appropriate.\nAffiliated packages\nWe will follow the practice of Astropy by having a core package and\naffiliated packages.  The core package will contain common tools and\nbase functionality that most plasma physicists will need.  The\naffiliated packages contained in separate repositories will include\nmore specialized functionality that is needed for subfields of plasma\nphysics.  This approach will reduce the likelihood of scope creep for\nthe core package while maintaining avenues for broader development.\nUnits\nMultiple sets of units are used by plasma physicists.  There exist\nsome peculiarities with how units are used within plasma physics, such\nas how an electron volt is typically used as a measurement of\ntemperature.  Code will be most readable and maintainable if written\nassuming a particular set of units, but there should be enough\nflexibility for people in different subfields to choose their\npreferred set of units. As the generally most common accepted \ninternational standard, SI base units will be utilized.  We will use an\nexisting Python module (e.g., astropy.units or pint) to assign units\nto variables and allow straightforward conversion between different\nsystems of units.",
      "tags": "",
      "url": "https://www.plasmapy.org/vision/"
    },
    {
      "title": "PlasmaPy v0.4.0 release",
      "text": "We are pleased to announce the release of PlasmaPy version 0.4.0.  This\nrelease adds several new functions to plasmapy.formulary, aliases\n(with trailing underscores) for the most commonly used formulary\nfunctions, classes to represent custom and dimensionless particles,\nand a new module in plasmapy.diagnostics for Thomson scattering.\nThe plasmapy.atomic subpackage was renamed to\nplasmapy.particles as part of an ongoing plan to reorganize\nPlasmaPy's subpackage structure.\nIn order to install PlasmaPy, please\nrefer to the installation instructions on PlasmaPy's\ndocumentation page.",
      "tags": "plasmapy,release",
      "url": "https://www.plasmapy.org/posts/plasmapy-v0_4_0-release/"
    },
    {
      "title": "PlasmaPy v0.3.1 release",
      "text": "We are excited to announce the release of PlasmaPy version 0.3.1.\nThis release includes two new subpackages: plasmapy.formulary,\nwhich consolidates much of the functionality that was formerly in\nplasmapy.physics, plasmapy.mathematics, and\nplasmapy.transport; and plasmapy.simulation, which contains\nour particle tracker and will be the place to consolidate tools\nrelated to plasma simulations.  These changes are part of an ongoing\nplan to reorganize PlasmaPy's subpackage structure that will continue\nin version 0.4.  In order to install PlasmaPy, please refer to the\ninstallation instructions\non PlasmaPy's documentation page.",
      "tags": "plasmapy,release",
      "url": "https://www.plasmapy.org/posts/plasmapy-v031-release/"
    },
    {
      "title": "PlasmaPy v0.2.0 release!",
      "text": "A few days ago the long overdue PlasmaPy release v0.2.0 hit PyPI with the force of a coronal mass ejection. You can upgrade via pip install --upgrade plasmapy.\nIf you'd rather use conda, though, you now have the option, and that is why we delayed the announcement: we now have our very own conda-forge feedstock and you can install PlasmaPy using conda install -c conda-forge plasmapy.\nPlease refer to the release notes to see what's changed.\nHappy coding, everyone!",
      "tags": "plasmapy,release",
      "url": "https://www.plasmapy.org/posts/plasmapy-v020-release/"
    },
    {
      "title": "PlasmaPy v0.1.1 bugfix release!",
      "text": "We have just released PlasmaPy v0.1.1, our first bugfix release which attempts to correct many of the flaws in our code we only noticed while releasing v0.1!\nTake a look at the release notes to see what's changed.\nAs usual (although this is likely the first time you have reason to run this command), you should now be able to update via pip install --upgrade plasmapy.\nHot plasmas, and happy coding, everyone!",
      "tags": "plasmapy,release",
      "url": "https://www.plasmapy.org/posts/plasmapy-v011-bugfix-release/"
    },
    {
      "title": "PlasmaPy v0.1 release!",
      "text": "I address you tonight not as a programmer of Python, not as a maintainer of a\nrepository, but as a citizen of open source.\nWe are faced with the very newest of releases.\nGitHub calls this one PlasmaPy v0.1.0, the first of the alphas.\nAnd yet, for the first time in the history of this project our team has the\ntechnology to prevent its own procrastination.\nAll of you pip installing with us need to know that everything that could be\ndone to delay this release has been called into service.\nThe coder's thirst for excellence, perfectionism, every step into the abyss of\ntransport theory, every adventurous refactor of docs, all of our combined ideas\nfor features and improvements, even the code reviews that\nwe performed have provided us with the tools to prevent this exciting event.\nThrough all the chaos that is our Git tree, through all of the PEP8 and\nthe Matrix discussion,\nthrough all the pain of learning Sphinx and rebasing,\nthrough all of our ~2000 commits,\nthere is one thing that has nourished our souls, and pushed us to complete\nthis release, and that is our pretty plots. Oh, and the\npossibility to\napply\nmore\ndecorators.\nThe dreams of the entire PlasmaPy community are focused tonight on these 31\nbrave committers,\npushing onto the master branch.\nAnd may we all, plasma enthusiasts the world over, see this release through.\nThermal speed,\nand a \\(\\sqrt{2}\\) to you,\n~PlasmaPy",
      "tags": "plasmapy,release",
      "url": "https://www.plasmapy.org/posts/plasmapy-v01-release/"
    },
    {
      "title": "PlasmaPy",
      "text": "An open source community developed Python 3.6+ package for plasma physics\n                in the early stages of development.\n            \n        \n        \n            What is PlasmaPy?\n            \n                PlasmaPy intends to be for plasma physics\n                what Astropy\n                is for astronomy - a collection of functionality commonly\n                used and shared between plasma physicists and researchers globally,\n                running within and leveraging the open source scientific Python ecosystem.\n            \n                The goals of this project are more thoroughly described in our\n                vision statement\n                and an earlier conference poster.\n            \n        \n        \n            Get PlasmaPy\n            \n                You can get PlasmaPy from pip via pip install plasmapy.\n                We're not on Conda yet, but we're working on it!\n            \n            \n                Like most scientific Python packages, PlasmaPy probably runs best on the \n                Anaconda distribution.\n            \n            \n                PlasmaPy requires Python 3.6 and is not compatible with \n                Python 2.\n            \n        \n        \n            Get Involved\n            \n                We need your help, every contribution is appreciated!\n                Check out our contribution guide to PlasmaPy.\n            \n        \n        \n            Learn PlasmaPy\n            \n                To learn how to use PlasmaPy, check out our\n                tutorial repository\n                and our documentation.\n                Both of these resources are currently under development.",
      "tags": "Astropy,physics,PlasmaPy,python",
      "url": "https://www.plasmapy.org/about/"
    },
    {
      "title": "Search",
      "text": "Search results appear here.",
      "tags": "",
      "url": "https://www.plasmapy.org/search/"
    }
  ]
};